include "..\\Core Files\\Interfaces\\MoviePluginInterface"

class WavPlugin;

class WavDialog: DialogClass {
  CheckBoxClass    chkWAV;
  LongEditClass    minWAV, maxWAV;
  StaticTextClass  txtWAV;
  StaticTextClass  txtAuthor;

  WavDialog(DialogClass parent, WavPlugin wav) :
    DialogClass    (parent, "WAV Settings:"),
      chkWAV       (this, "Search For WAVs",  10,  10,  100,  12, 0, wav._enabled),
      minWAV       (this, "Minimum file size (bytes: 0 - 10,000,000)", 10, 35, 100, 12, 0, wav._wavMin, 0, 10000000, WindowClass::REQUIRED),
      txtWAV       (this, "9 kb = 1 second of movie (on average).  By default this script will look for movies " +
                          "5 seconds or longer.", 10,  60,  220,  24, 0),
      maxWAV       (this, "Maximum file size (bytes: 9,000 - 10,000,000,000)", 10, 95, 100, 12, 0, wav._wavMax, 9, 10000000000, WindowClass::REQUIRED),
      txtAuthor    (this, "Plugin developed by:\r\n" +
                           "\r\n" +
                           "Trevor Fairchild\r\n" +
                           "Electronic Crime Section\r\n" +
                           "Ontario Provincial Police\r\n" +
                           "C4P@e-crime.on.ca",
                                        175, 175, 100, 50, 0)
  {
  }
}

class WavPlugin: MoviePluginInterface{

  WavDialog   _dlg;

  bool        _enabled;

  double      _movieLength;

  int         _headerIndex;

  long        _wavMax;
  long        _wavMin;
  long        _rangeToIgnoreSearchHits;

  String      _extension;
  String      _header;
  String      _metaData;
  String      _pluginName;
  String      _version;

  WavPlugin()
  {
    _pluginName = "C4M Plugin - WAV";
    _enabled = false;
    _extension = "WAV";
    _header = "RIFF....WAVE";
    _metaData = "";
    _wavMin = 45000;
    _wavMax = 2000000000;
    _loadSettings();

    _version = "1.0.0";
  }

  void _loadSettings(){
    StorageClass myStorage(_pluginName, 0);
    _settings(myStorage);
  }

  void _settings(StorageClass myStorage){
    myStorage.Value("wavEnabled", _enabled);
    myStorage.Value("wavMin", _wavMin);
    myStorage.Value("wavMax", _wavMax);
  }


  long _validate(EntryClass e, long offset){

    _metaData = "";
    _movieLength = -1;

    WriteDebug(_pluginName, "WAV Examiner (offset " + offset + ")", false);
    WriteDebug(_pluginName, "==============", false);

    bool   isGood = false;

    String s;

    long   totalSize;

    // Open the entry into the file
    EntryFileClass file();

    file.Open(e, FileClass::SLACK | FileClass::NOINITIALIZE);
    
    file.SetCodePage(CodePageClass::ANSI);
    file.Seek(offset);

    // RIFF
    file.ReadString(s, 4);
    if("RIFF".Compare(s, -1) == 0){

      // Set the Movie Size
      totalSize = file.ReadBinaryInt(4);
      totalSize = totalSize + 8;

      // WAVE
      file.ReadString(s, 4);
      if("WAVE".Compare(s, -1) == 0){
        WriteDebug(_pluginName, "  RIFF Chunk", false);
        WriteDebug(_pluginName, "  ===========", false);
        WriteDebug(_pluginName, "  type : WAVE", false);
        WriteDebug(_pluginName, "  size : " + totalSize, false);

        isGood = true;
      } else {
        WriteDebug(_pluginName, "  RIFF Chunk", false);
        WriteDebug(_pluginName, "  ===========", false);
        WriteDebug(_pluginName, "  type : invalid (" + s + ")", false);
        WriteDebug(_pluginName, "  size : " + totalSize, false);
      }
    } else {
      WriteDebug(_pluginName, "  RIFF Chunk", false);
      WriteDebug(_pluginName, "  ===========", false);
      WriteDebug(_pluginName, "  type : invalid", false);
      WriteDebug(_pluginName, "  size : ~~", false);
    }

    // End of File
    WriteDebug(_pluginName, "RIFF WAVE Movie Findings", false);
    WriteDebug(_pluginName, "=======================", false);
    WriteDebug(_pluginName, "Starting Offset: " + offset, false);
    WriteDebug(_pluginName, "Movie Length:    " + totalSize, false);

    if(isGood){
      if(totalSize != 0){
        // to deal with partially downloaded movies, if the offset is 0 and the file is good, then
        //  just take the logical size
        if(offset == 0 &! e.IsUnallocated()){
          WriteDebug(_pluginName, "WAV validated (size = " + totalSize + ").  Given the search hit was at offset 0, using the entry's Logical Size instead (" + e.LogicalSize() + ")", false);
          totalSize = e.LogicalSize();
        }

        if(totalSize > _wavMax){
          WriteDebug(_pluginName, "WAV validated, but size (" + totalSize + ") exceeds format's maximum (" + _wavMax + ")", false);
          totalSize = _wavMax;
        }

        if(totalSize < _wavMin){
          WriteDebug(_pluginName, "WAV validated, but size (" + totalSize + ") is under the format's minimum (" + _wavMin + ")", false);
          totalSize = 0;
        }

        _rangeToIgnoreSearchHits = totalSize;
        return totalSize;

      }
      else {
        _rangeToIgnoreSearchHits = 0;
        return 0;
      }
    }
    else {
      _rangeToIgnoreSearchHits = 0;
      return 0;
    }
  }


  // ==============================================
  // Interface methods
  virtual String Version(){
    return _version;
  }
  virtual MemoryFileClass GetMemoryFileClass(){
    return null;
  }
  virtual bool Enabled(){
    return _enabled;
  }
  virtual void SetEnabled(const bool &val){
    _enabled = val;
  }
  virtual String Extension(){
    return _extension;
  }
  virtual void SetExtension(const String &val){
    _extension = val;
  }
  virtual String Header(){
    return _header;
  }
  virtual void SetHeader(const String &val){
    _header = val;
  }
  virtual String MetaData(){
    return _metaData;
  }
  virtual DialogClass GetDialog(DialogClass parent){
    _dlg = new WavDialog(parent, this);
    return _dlg;
  }
  virtual long Validate(EntryClass e, long offset){
    return _validate(e, offset);
  }
  virtual int HeaderIndex(){
    return _headerIndex;
  }
  virtual void SetHeaderIndex(int val){
    _headerIndex = val;
  }
  virtual void SaveSettings(){
    StorageClass myStorage(_pluginName, StorageClass::WRITE);
    _settings(myStorage);
  }
  virtual String PluginName(){
    return _pluginName;
  }
  virtual void SetPluginName(const String &val){
    _pluginName = val;
  }
  virtual double MovieLength(){
    return _movieLength;
  }
  virtual long BytesPrecedingHeader(){
    return 0;
  }
  virtual long RangeToIgnoreSearchHits(){
    return _rangeToIgnoreSearchHits;
  }
  virtual long SmallFileLimit(){
    return 51200;  // 50kb
  }
  // ==============================================
}
