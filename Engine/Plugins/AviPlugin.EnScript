/*
  version 1.1.0: 30-Sep-2010.  Completely new design.
*/

include "..\\Core Files\\Interfaces\\MoviePluginInterface"
include "AVI Parser\\AviBase"

class AviPlugin;

class AviDialog: DialogClass {
  CheckBoxClass    chkAVI;
  LongEditClass    minAVI, maxAVI;
  StaticTextClass  txtAVI;
  StaticTextClass  txtAuthor;

  AviDialog(DialogClass parent, AviPlugin avi) :
    DialogClass    (parent, "AVI Settings:"),
      chkAVI       (this, "Search For AVIs",  10,  10,  100,  12, 0, avi._enabled),
      minAVI       (this, "Minimum file size (bytes: 0 - 10,000,000)", 10, 35, 100, 12, 0, avi._aviMin, 0, 10000000, WindowClass::REQUIRED),
      txtAVI       (this, "9 kb = 1 second of movie (on average).  By default this script will look for movies " +
                          "5 seconds or longer.", 10,  60,  220,  24, 0),
      maxAVI       (this, "Maximum file size (bytes: 9,000 - 10,000,000,000)", 10, 95, 100, 12, 0, avi._aviMax, 9, 10000000000, WindowClass::REQUIRED),
      txtAuthor      (this, "Plugin developed by:\r\n" +
                            "\r\n" +
                            "Trevor Fairchild\r\n" +
                            "Electronic Crime Section\r\n" +
                            "Ontario Provincial Police\r\n" +
                            "C4P@e-crime.on.ca",
                                        175, 175, 100, 50, 0)
  {
  }
}

class AviPlugin: MoviePluginInterface{

  AviDialog   _dlg;

  bool        _enabled;
  double      _movieLength;

  int         _headerIndex;

  long        _aviMax;
  long        _aviMin;
  long        _rangeToIgnoreSearchHits;

  String      _extension;
  String      _header;
  String      _metaData;
  String      _pluginName;
  String      _version;

  AviPlugin()
  {
    _pluginName = "C4M Plugin - AVI";
    _enabled = true;
    _extension = "AVI";
    _header = "RIFF"; //\\x52\\x49\\x46\\x46....\\x41\\x56\\x49\\x20\\x4C\\x49\\x53\\x54";  //4byte length marker, then the "ftyp" marker
    _metaData = "";
    _aviMin = 45000;
    _aviMax = 10000000000;
    _loadSettings();

    _version = "1.1.0";
  }

  void _loadSettings(){
    StorageClass myStorage(_pluginName, 0);
    _settings(myStorage);
  }

  void _settings(StorageClass myStorage){
    myStorage.Value("aviEnabled", _enabled);
    myStorage.Value("aviMin", _aviMin);
    myStorage.Value("aviMax", _aviMax);
  }

  long _validate(EntryClass e, long offset){
    EntryFileClass ef();

    ef.Open(e, FileClass::SLACK | FileClass::NOINITIALIZE);
    
    if(ef){
      AviBase riff(_observer, _pluginName);

      _metaData = "";
      _movieLength = 0;
      riff.Read(ef, offset, "");

      if(riff.fileSize > 0){
        _metaData = riff._metaData;
        _movieLength = riff._movieLength;

        if(riff.fileSize > _aviMax){
          WriteDebug(_pluginName, "AVI validated.  Size (" + riff.fileSize + ") exceeds avi max of " + _aviMax + ". Data truncated.", false);
          _rangeToIgnoreSearchHits = _aviMax;
          return _aviMax;
        }
        else if(riff.fileSize < _aviMin){
          WriteDebug(_pluginName, "AVI validated.  Size (" + riff.fileSize + ") is under the avi min of " + _aviMin + ". Data ignored.", false);
          _rangeToIgnoreSearchHits = -1 * riff.fileSize;
          return (-1 * riff.fileSize);
        }
        else {
          WriteDebug(_pluginName, "AVI validated.  Size identified as " + riff.fileSize, false);
        }
        _rangeToIgnoreSearchHits = riff.fileSize;
        return riff.fileSize;
      }
      else {
        _rangeToIgnoreSearchHits = 0;
        return 0;
      }
    }
    else {
      WriteDebug(_pluginName, "Could not open Entry: " + e.FullPath(), false);
      _rangeToIgnoreSearchHits = 0;
      return 0;
    }
  }






  // ==============================================
  // Interface methods
  virtual String Version(){
    return _version;
  }
  virtual MemoryFileClass GetMemoryFileClass(){
    return null;
  }
  virtual bool Enabled(){
    return _enabled;
  }
  virtual void SetEnabled(const bool &val){
    _enabled = val;
  }
  virtual String Extension(){
    return _extension;
  }

  virtual void SetExtension(const String &val){
    _extension = val;
  }
  virtual String Header(){
    return _header;
  }
  virtual void SetHeader(const String &val){
    _header = val;
  }
  virtual String MetaData(){
    return _metaData;
  }
  virtual DialogClass GetDialog(DialogClass parent){
    _dlg = new AviDialog(parent, this);
    return _dlg;
  }
  virtual long Validate(EntryClass e, long offset){
    return _validate(e, offset);
  }
  virtual int HeaderIndex(){
    return _headerIndex;
  }
  virtual void SetHeaderIndex(int val){
    _headerIndex = val;
  }
  virtual void SaveSettings(){
    StorageClass myStorage(_pluginName, StorageClass::WRITE);
    _settings(myStorage);
  }
  virtual String PluginName(){
    return _pluginName;
  }
  virtual void SetPluginName(const String &val){
    _pluginName = val;
  }
  virtual double MovieLength(){
    return _movieLength;
  }
  virtual long BytesPrecedingHeader(){
    return 0;
  }
  virtual long RangeToIgnoreSearchHits(){
    return _rangeToIgnoreSearchHits;
  }
  virtual long SmallFileLimit(){
    return 102400;  // 100kb
  }
  // ==============================================
}
