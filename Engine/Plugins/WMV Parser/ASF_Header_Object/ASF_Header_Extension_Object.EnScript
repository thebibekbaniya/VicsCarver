include "..\\..\\..\\Core Files\\Interfaces\\ObserverInterface"

class ASF_Header_Extension_Object {

  ulong  ObjectId1;
  ulong  ObjectId2;
  long   ObjectSize;
  ulong  ReservedField11;
  ulong  ReservedField12;
  ulong  ReservedField2;
  long   HeaderExtensionDataSize;

  String            _pluginName;
  ObserverInterface _observer;

  ASF_Header_Extension_Object(const String &thePluginName, ObserverInterface theObserver){
    _pluginName = thePluginName;
    _observer = theObserver;
  }

  void Read(EntryFileClass ef, const long &offset){
    ef.Seek(offset);

    ObjectId1 = ef.ReadBinaryInt(8, true);
    ObjectId2 = ef.ReadBinaryInt(8, true);
    ObjectSize = ef.ReadBinaryInt(8, false);

    if(offset + ObjectSize < ef.GetSize()){
      ReservedField11 = ef.ReadBinaryInt(8, true);
      ReservedField12 = ef.ReadBinaryInt(8, true);
      ReservedField2 = ef.ReadBinaryInt(2, false);
      HeaderExtensionDataSize = ef.ReadBinaryInt(4, false);

      // For the moment the contents of the Header Extension Object are being overlooked

      _observer.WriteDebug(_pluginName, "    ASF_Header_Extension_Object", false);
      _observer.WriteDebug(_pluginName, "    ===========================", false);
      _observer.WriteDebug(_pluginName, "      Offset: " + offset, false);
      _observer.WriteDebug(_pluginName, "      Object Size: " + ObjectSize, false);
      _observer.WriteDebug(_pluginName, "      Data Size:   " + HeaderExtensionDataSize, false);
      _observer.WriteDebug(_pluginName, "", false);
    }
    else {
      _observer.WriteDebug(_pluginName, "Not enough data to read the contents of this object.", false);
    }

    ef.Seek(offset + ObjectSize);
  }
}
