/*
  Revisions:  added code to stop reading codecs if it exceeds the Object Size
*/


include "..\\..\\..\\Core Files\\Interfaces\\ObserverInterface"

class ASF_Codec_List_Object;

class CodecEntry{
  int    Type;
  int    CodecNameLength;
  String CodecName;
  int    CodecDescriptionLength;
  String CodecDescription;
  int    CodecInformationLength;
  //long   CodecInformation;
  ObserverInterface _observer;

  CodecEntry(EntryFileClass ef, ObserverInterface theObserver){
    Type = ef.ReadBinaryInt(2, false);
    _observer = theObserver;
    CodecNameLength = ef.ReadBinaryInt(2, false);

    long pos = ef.GetPos();
    ef.SetCodePage(CodePageClass::UNICODE);
    ef.ReadString(CodecName, CodecNameLength);

    ef.Seek(pos + (CodecNameLength*2));
    CodecDescriptionLength = ef.ReadBinaryInt(2, false);

    pos = ef.GetPos();
    ef.ReadString(CodecDescription, CodecDescriptionLength);

    ef.Seek(pos + (CodecDescriptionLength * 2));
    CodecInformationLength = ef.ReadBinaryInt(2, false);

    pos = ef.GetPos();
    // There's no practical need to store the contents of CodecInformation
    ef.Skip(CodecInformationLength);

    ef.SetCodePage(CodePageClass::ANSI);
  }
}

typedef CodecEntry[]  CodecEntries;
class ASF_Codec_List_Object {

  ulong  ObjectId1;
  ulong  ObjectId2;
  long   ObjectSize;
  ulong  Reserved1;
  ulong  Reserved2;
  long   CodecEntriesCount;
  CodecEntries codecEntries;

  String            _pluginName;
  ObserverInterface _observer;

  ASF_Codec_List_Object(const String &thePluginName, ObserverInterface theObserver){
    codecEntries = new CodecEntries();
    _pluginName = thePluginName;
    _observer = theObserver;
  }

  void Read(EntryFileClass ef, const long &offset){
    ef.Seek(offset);

    ObjectId1 = ef.ReadBinaryInt(8, true);
    ObjectId2 = ef.ReadBinaryInt(8, true);
    ObjectSize = ef.ReadBinaryInt(8, false);

    if(offset + ObjectSize < ef.GetSize()){
      Reserved1 = ef.ReadBinaryInt(8, true);
      Reserved2 = ef.ReadBinaryInt(8, true);
      CodecEntriesCount = ef.ReadBinaryInt(4, false);

      // Special note:  the ObjectSize must be enforced
      // If this is a false positive, the number of CodecEntries could prove to be
      // greater than the ObjectSize.
      // If this happens, we need to cut our losses


      _observer.WriteDebug(_pluginName, "    ASF_Codec_List_Object", false);
      _observer.WriteDebug(_pluginName, "    =====================", false);
      _observer.WriteDebug(_pluginName, "      Offset: " + offset, false);
      _observer.WriteDebug(_pluginName, "      Object Size: " + ObjectSize, false);
      _observer.WriteDebug(_pluginName, "      Entries Count: " + CodecEntriesCount, false);

      for(int i = 0; i<CodecEntriesCount; i++){
        CodecEntry ce(ef, _observer);
        codecEntries.Add(ce);

        _observer.WriteDebug(_pluginName, "      Codec(" + i + ")", false);
        _observer.WriteDebug(_pluginName, "        Name: " + ce.CodecName, false);
        _observer.WriteDebug(_pluginName, "        Description: " + ce.CodecDescription, false);

        // Check here to ensure we are still within the bounds of the ObjectSize
        if(ef.GetPos() > offset + ObjectSize){
          _observer.WriteDebug(_pluginName, "Codec List exceeds the Codec List Object's size.", false);
          break;
        }
      }

      _observer.WriteDebug(_pluginName, "", false);

    }
    else {
      _observer.WriteDebug(_pluginName, "Not enough data to read the contents of this object.", false);
    }

    ef.Seek(offset + ObjectSize);
  }
}
