include "..\\Core Files\\Interfaces\\PicturePluginInterface"

class ArtPlugin;


// Dialog Class exposing variables specific to this format
class ArtDialog: DialogClass {
  CheckBoxClass    chkART;
  StaticTextClass  txtART;
  LongEditClass    lngMin, lngMax;
  StaticTextClass  txtNote;
  StaticTextClass  txtAuthor;

  ArtPlugin Art;

  ArtDialog(DialogClass parent, ArtPlugin art) :
    DialogClass    (parent, "ART Settings:"),
      chkART       (this, "Search For ARTs",  10,  10,  100,  12, 0, art._enabled),
      txtART       (this, "All ART Files will be exported based on File Size tag inside the Header.\n\n\n" +
                   "Note that C4P is incapable of displaying ART files.  " +
                   "If you wish to use ART files, you must have Graphics Workshop " +
                   "Pro, which will enable you to convert ART files to JGP.  C4P " +
                   "v3 is designed to account for this anomaly.  For more " +
                   "information, contact c4p@e-crime.on.ca.", 10,  25,  300,  75, 0),
      lngMax      (this, "Set a maximum size of XX kb: (100,000 - 10,000,000 kb)", 10, 100, 100, 12, 0,
                                                art._artMax , 100000, 10000000, WindowClass::REQUIRED),

      txtNote     (this, "Note that C4All cannot show ART files.  There are extra steps that need to be taken " +
                         "if you need to extract AOL ART files...", 10, 135, 300, 24, 0),
      txtAuthor      (this, "Plugin developed by:\r\n" +
                            "\r\n" +
                            "Trevor Fairchild\r\n" +
                            "Electronic Crime Section\r\n" +
                            "Ontario Provincial Police\r\n" +
                            "C4P@e-crime.on.ca",
                                        175, 175, 100, 50, 0),
      Art = art
  {
  }
}


// Actual Format class, which implements the PicturePluginInterface
class ArtPlugin : PicturePluginInterface{


  ArtDialog         _dlg;

  bool              _enabled;

  double            _aspectRatio;
  double            _bitDepth;

  int               _headerIndex;

  long               _artMax;
  long               _artMin;
  long               _rangeToIgnoreSearchHits;

  SearchClass        Search;

  String            _extension;
  String            _header;
  String            _metaData;
  String            _pluginName;
  String      _version;



  // Plugin's Constructor, where the base values are set and any readable values
  //   are loaded from the Storage file
  ArtPlugin()
  {
    _pluginName = "C4P Plugin - ART";
    _enabled = false;
    _extension = "ART";
    _header = "\\x4A\\x47[\\x03\\x04]\\x0E";
    _metaData = "";
    Search = new SearchClass();
    BuildSearch();

    _artMin = 0;
    _artMax = 20000000;
    _loadSettings();

    _version = "1.0.0";
  }

  void _loadSettings(){
    StorageClass myStorage(_pluginName, 0);
    _settings(myStorage);
  }

  void _settings(StorageClass myStorage){
    myStorage.Value("artEnabled", _enabled);
    myStorage.Value("artMin", _artMin);
    myStorage.Value("artMax", _artMax);
  }

  void BuildSearch(){
    if (!Search.AddKeyword("\\xCF\\xCB", KeywordClass::ANSI | KeywordClass::GREP)){
      WriteDebug("ArtClass", "Failed To Add PNGs Keyword", true);
    }

    if (!Search.AddKeyword("\\xD0\\xCB\\x00\\x00", KeywordClass::ANSI | KeywordClass::GREP)){
      WriteDebug("ArtClass", "Failed To Add PNGs Keyword", true);
    }

    if (!Search.Create()){
      WriteDebug("ArtClass", "Failed To Create SearchClass", true);
    }
  }

  // this plugin's logic used to determine whether or not
  // the data is compliant with ART format.
  long _validate(EntryClass e, long offset){

    // Reset the classwide variables
    _aspectRatio = 0;
    _bitDepth = 0;
    _metaData = "";

    long carveSize;

    WriteDebug("ArtClass", "Validate Commence", true);

    EntryFileClass ef();

    ef.Open(e, FileClass::SLACK | FileClass::NOINITIALIZE);
    
    if(ef){

      // resize the maximum length based on the file itself
      if(_artMax + offset > ef.GetSize())
        _artMax = ef.GetSize() - offset;

      ef.Seek(offset);
      SetRange("Searching ART footer", _artMax);

      long hitCount = Search.Find(ef, _artMax, -1, SearchClass::STATUSUPDATE);

      WriteDebug("ArtClass", "Searching ART footer (" + _artMax + ")", true);

      SearchClass::HitArrayClass hits = Search.GetHits();
      WriteDebug("ArtClass", "ART footers found (qty: " + hitCount + ")", true);

      forall(SearchClass::HitClass h in hits){
        WriteDebug("ArtClass", "ART footer found, offset " + h.Offset(), true);

        carveSize = h.Offset() - offset;
        if(h.KeywordIndex() == 0)
          carveSize = carveSize + 2;
        else
          carveSize = carveSize + 4;
      }

      if(carveSize > _artMax){
        WriteDebug("ArtClass", "Validated ART exceeds maximum size of " + _artMax  + ". File will be ignored", true);
        carveSize = 0;
      }
    }
    else
      WriteFullLine("Failed to open entry: " + e.FullPath());


    WriteDebug("ArtClass", "carveSize result = " + carveSize, true);


    _rangeToIgnoreSearchHits = carveSize;
    return carveSize;
  }






  // =======================================================================================
  // Interface Functions that MUST be present and SHOULD tie in with the rest of your script
  virtual String Version(){
    return _version;
  }
  virtual MemoryFileClass GetMemoryFileClass(){
    return null;
  }
  virtual bool Enabled(){
    return _enabled;
  }
  virtual void SetEnabled(const bool &val){
    _enabled = val;
  }

  virtual String Extension(){
    return _extension;
  }
  virtual void SetExtension(const String &val){
    _extension = val;
  }

  virtual String Header(){
    return _header;
  }
  virtual void SetHeader(const String &val){
    _header = val;
  }

  virtual String MetaData(){
    return _metaData;
  }

  virtual DialogClass GetDialog(DialogClass parent){
    _dlg = new ArtDialog(parent, this);
    return _dlg;
  }

  virtual long Validate(EntryClass e, long offset){
    return _validate(e, offset);
  }

  virtual double AspectRatio(){
    return _aspectRatio;
  }

  virtual double BitDepth(){
    return _bitDepth;
  }

  virtual int HeaderIndex(){
    return _headerIndex;
  }
  virtual void SetHeaderIndex(int val){
    _headerIndex = val;
  }

  virtual void SaveSettings(){
    StorageClass myStorage(_pluginName, StorageClass::WRITE);
    _settings(myStorage);
  }

  virtual String PluginName(){
    return _pluginName;
  }
  virtual void SetPluginName(const String &val){
    _pluginName = val;
  }
  virtual long BytesPrecedingHeader(){
    return 0;
  }
  virtual long RangeToIgnoreSearchHits(){
    return _rangeToIgnoreSearchHits;
  }
  virtual long SmallFileLimit(){
    return 3072;  // 3kb
  }
  // =======================================================================================

}

