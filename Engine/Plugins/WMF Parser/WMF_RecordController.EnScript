include "..\\..\\Core Files\\Interfaces\\ObserverInterface"

include "WMF_Record"

class WMF_RecordController {

  ObserverInterface _observer;

  WMF_RecordController(ObserverInterface theObserver)
  {
    _observer = theObserver;
  }

  void WriteDebug(const String &val){
    _observer.WriteDebug("WMF_Plugin\\WMF_RecordController", val, true);
  }


  // 2.1.2 - BinaryRasterOperation Enumeration
  bool IsABinaryRasterOperation(long val){
    if(val <= 0x0010)
      return true;
    return false;
  }

  // 2.1.4 - BrushStyle Enumeration
  bool IsABrushStyle_Enumeration(long val){
    if(val <= 0x0009)
      return true;
    return false;
  }

  // 2.1.11 - FloodFill Enumeration
  bool IsAFloodFill_Enumeration(long val){
    if(val == 0x0000)    // FLOODFILLBORDER
      return true;
    if(val == 0x0001)    // FLOODFILLSURFACE
      return true;
    return false;
  }

  // 2.1.15 - Layout Enumeration
  bool IsALayout_Enumeration(long val){
    if(val == 0x0001)    // LAYOUT_RTL
      return true;
    if(val == 0x0002)    // LAYOUT_BTT
      return true;
    if(val == 0x0004)    // LAYOUT_VBH
      return true;
    if(val == 0x0008)    // LAYOUT_BITMAPORIENTATIONPRESERVED
      return true;
    return false;
  }

  // 2.1.18 - MapMode Enumeration
  bool IsAMapMode_Enumeration(long val){
    if(val == 0x0001)    // MM_TEXT
      return true;
    if(val == 0x0002)    // MM_LOMETRIC
      return true;
    if(val == 0x0003)    // MM_HIMETRIC
      return true;
    if(val == 0x0004)    // MM_LOENGLISH
      return true;
    if(val == 0x0005)    // MM_HIENGLISH
      return true;
    if(val == 0x0006)    // MM_TWIPS
      return true;
    if(val == 0x0007)    // MM_ISOTROPIC
      return true;
    if(val == 0x0008)    // MM_ANISOTROPIC
      return true;
    return false;
  }

  // 2.1.19 - MetafileEscapes Enumeration
  bool IsAMetafileEscapes_Enumeration(long val){
    // There's a lot of values...
    if(val <= 0x000F)
      return true;
    if(val <= 0x001F)
      return true;
    if(val == 0x0020)    // SET_DIBSCALING
      return true;
    if(val == 0x0021)    // EPS_PRINTING
      return true;
    if(val == 0x0022)    // ENUM_PAPERMETRICS
      return true;
    if(val == 0x0023)    // GETSET_PAPERMETRICS
      return true;
    if(val == 0x0025)    // POSTSCRIPT_DATA
      return true;
    if(val == 0x0026)    // POSTSCRIPT_IGNORE
      return true;
    if(val == 0x002A)    // GET_DEVICEUNITS
      return true;
    if(val == 0x0100)    // GET_EXTENDED_TEXTMETRICS
      return true;
    if(val == 0x0102)    // GET_PAIRKERNTABLE
      return true;
    if(val == 0x0200)    // EXTTEXTOUT
      return true;
    if(val == 0x0201)    // GET_FACENAME
      return true;
    if(val == 0x0202)    // DOWNLOAD_FACE
      return true;
    if(val == 0x0801)    // METAFILE_DRIVER
      return true;
    if(val == 0x0C01)    // QUERY_DIBSUPPORT
      return true;
    if(val == 0x1000)    // BEGIN_PATH
      return true;
    if(val == 0x1001)    // CLIP_TO_PATH
      return true;
    if(val == 0x1002)    // END_PATH
      return true;
    if(val == 0x1005)    // POSTSCRIPT_IDENTIFY
      return true;
    if(val == 0x1006)    // POSTSCRIPT_INJECTION
      return true;
    if(val == 0x1007)    // CHECK_JPEGFORMAT
      return true;
    if(val == 0x1008)    // CHECK_PNGFORMAT
      return true;
    if(val == 0x1009)    // GET_PS_FEATURESETTING
      return true;
    if(val == 0x100A)    // TS_QUERYVER
      return true;
    if(val == 0x100B)    // TS_RECORD
      return true;
    if(val == 0x1010)    // OPEN_CHANNEL
      return true;
    if(val == 0x1011)    // DOWNLOAD_HEADER
      return true;
    if(val == 0x1012)    // CLOSE_CHANNEL
      return true;
    if(val == 0x1013)    // POSTSCRIPT_PASSTHROUGH
      return true;
    if(val == 0x1014)    // ENCAPSULATED_POSTSCRIPT
      return true;
    if(val == 0x11D8)    // SPCLPASSTHROUGH2
      return true;
    return false;
  }

  // 2.1.22 - MixMode Enumeration
  bool IsAMixMode_Enumeration(long val){
    if(val == 0x0001)    // TRANSPARENT
      return true;
    if(val == 0x0002)    // OPAQUE
      return true;
    return false;
  }

  // 2.1.27 - PolyFillMode Enumeration
  bool IsAPolyFillMode_Enumeration(long val){
    if(val == 0x0001)    // ALTERNATE
      return true;
    if(val == 0x0002)    // WINDING
      return true;
    return false;
  }

  // 2.1.31 - StretchMode Enumeration
  bool IsAStretchMode_Enumeration(long val){
    if(val == 0x0001)    // BLACKONWHITE
      return true;
    if(val == 0x0002)    // WHITEONBLACK
      return true;
    if(val == 0x0003)    // COLORONCOLOR
      return true;
    if(val == 0x0004)    // HALFTONE
      return true;
    return false;
  }

  // 2.1.32 - Ternary Raster Operation Enumeration
  bool IsATernaryRasterOperation(long val){
    // This list actually seems to allow every possible value...
    if(val >= 0x00)
      return true;
    return true;
  }

  // 2.1.33 - TextAlignmentMode Enumeration
  bool IsATextAlignmentMode_Enumeration(long val){
    // Not sure how to handle this as the specification allows for a combination of the values below.  I don't know how
    // combinations would show.  TA_RIGHT && VTA_CENTER would theoretically come out as 0x0008, but that's also TA_BOTTOM...
    if(val >= 0x00)
      return true;
    return true;
    /*
    if(val == 0x0000)    // TA_NOUPDATECP
      return true;
    if(val == 0x0000)    // TA_LEFT
      return true;
    if(val == 0x0000)    // TA_TOP
      return true;
    if(val == 0x0001)    // TA_UPDATECP
      return true;
    if(val == 0x0002)    // TA_RIGHT
      return true;
    if(val == 0x0006)    // TA_CENTER
      return true;
    if(val == 0x0008)    // TA_BOTTOM
      return true;
    if(val == 0x0018)    // TA_BASELINE
      return true;
    if(val == 0x0100)    // TA_RTLREADING
      return true;
    if(val == 0x0000)    // VTA_TOP = TA_LEFT
      return true;
    if(val == 0x0000)    // VTA_RIGHT = TA_TOP
      return true;
    if(val == 0x0002)    // VTA_BOTTOM = TA_RIGHT
      return true;
    if(val == 0x0006)    // VTA_CENTER = TA_CENTER
      return true;
    if(val == 0x0008)    // VTA_LEFT = TA_BOTTOM
      return true;
    if(val == 0x0018)    // VTA_BASELINE = TA_BASELINE
      return true;

    return false;
    */
  }

  String getRecordType(WMF_Record rec, FileClass fc){
    if(rec.RecordFunction == 0x0000) {             // 2.3.2.2 META_EOF Record
      rec.ShouldBeSize = 6;
      return "META_EOF";
    }

    else if(rec.RecordFunction == 0x0035) {        // 2.3.5.8 META_REALIZEPALETTE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 6;
      rec.DataSkipped = true;
      */
      return "META_REALIZEPALETTE";
    }

    else if(rec.RecordFunction == 0x0037) {        // 2.3.5.19 META_SETPALENTRIES Record
      // variable length record
      return "META_SETPALENTRIES";
    }

    else if(rec.RecordFunction == 0x0102){         // 2.3.5.15 META_SETBKMODE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      int val = fc.ReadBinaryInt(2,0);
      if(!IsAMixMode_Enumeration(val)){
        WriteDebug("Record data (" + val + ") not in MixMode Enumeration list");
        rec.IsValid = false;
      }
      */
      return "META_SETBKMODE";
    }

    else if(rec.RecordFunction == 0x0103){         // 2.3.5.17 META_SETMAPMODE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      long val = fc.ReadBinaryInt(2,0);
      if(!IsAMapMode_Enumeration(val)){
        WriteDebug("Record data (" + val + ") not in MapMode Enumeration list");
        rec.IsValid = false;
      }
      */
      return "META_SETMAPMODE";
    }

    else if(rec.RecordFunction == 0x0104){        // 2.3.5.22 META_SETROP2 Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;

      long drawMode = fc.ReadBinaryInt(2, 0);
      if(!IsABinaryRasterOperation(drawMode)){
        WriteDebug("Record data (" + drawMode + ") not in Binary Raster Operation Enumeration list");
        rec.IsValid = false;
      }
      */
      return "META_SETROP2";
    }

    else if(rec.RecordFunction == 0x0105){        // 2.3.5.21 META_SETRELABS Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 6;
      rec.DataSkipped = true;
      */
      return "META_SETRELABS";
    }

    else if(rec.RecordFunction == 0x0106){        // 2.3.5.20 META_SETPOLYFILLMODE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      long polyFillMode = fc.ReadBinaryInt(2, 0);
      if(!IsAPolyFillMode_Enumeration(polyFillMode)){
        WriteDebug("Record data (" + polyFillMode + ") not in Poly Fill Mode Enumeration list");
        rec.IsValid = false;
      }
      */
      return "META_SETPOLYFILLMODE";
    }

    else if(rec.RecordFunction == 0x0107){        // 2.3.5.23 META_SETSTRETCHBLTMODE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      //rec.DataSkipped = true;

      long stretch = fc.ReadBinaryInt(2, 0);
      if(!IsAStretchMode_Enumeration(stretch)){
        WriteDebug("Record data (" + stretch + ") not in StretchMode Enumeration list");
        rec.IsValid = false;
      }
      */

      return "META_SETSTRETCHBLTMODE";
    }

    else if(rec.RecordFunction == 0x0108){        // 2.3.5.25 META_SETTEXTCHAREXTRA Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      fc.Skip(2);
      */
      return "META_SETTEXTCHAREXTRA";
    }

    else if(rec.RecordFunction == 0x0127){        // 2.3.5.10 META_RESTOREDC Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      fc.Skip(2);
      */
      return "META_RESTOREDC";
    }

    else if(rec.RecordFunction == 0x0139){        // 2.3.5.9 META_RESIZEPALETTE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      fc.Skip(2);
      */
      return "META_RESIZEPALETTE";
    }

    else if(rec.RecordFunction == 0x0142){        // 2.3.4.8 META_DIBCREATEPATTERNBRUSH Record
      // variable record length - cannot skip this data,
      // but we can invalidate the brush style
      long pos = fc.GetPos();

      long style = fc.ReadBinaryInt(2, 0);
      if(!IsABrushStyle_Enumeration(style)){
        WriteDebug("Record data (" + style + ") not in Brush Style Enumeration list");
        rec.IsValid = false;
      }

      fc.Seek(pos);
      return "META_DIBCREATEPATTERNBRUSH";
    }

    else if(rec.RecordFunction == 0x0149){        // 2.3.5.16 META_SETLAYOUT Record
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;

      long layout = fc.ReadBinaryInt(2, 0);
      if(!IsALayout_Enumeration(layout)){
        WriteDebug("Record data (" + layout +
            ") not in Layout Enumeration list");
        rec.IsValid = false;
      }
      return "META_SETLAYOUT";
    }

    else if(rec.RecordFunction == 0x0201){        // 2.3.5.14 META_SETBKCOLOR Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETBKCOLOR";
    }

    else if(rec.RecordFunction == 0x0209){        // 2.3.5.26 META_SETTEXTCOLOR Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETTEXTCOLOR";
    }

    else if(rec.RecordFunction == 0x0211){        // 2.3.5.6 META_OFFSETVIEWPORTORG Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_OFFSETVIEWPORTORG";
    }

    else if(rec.RecordFunction == 0x0214){        // 2.3.3.10 META_LINETO Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_LINETO";
    }

    else if(rec.RecordFunction == 0x0214){        // 2.3.5.4 META_MOVETO Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_MOVETO";
    }

    else if(rec.RecordFunction == 0x0220){        // 2.3.5.5 META_OFFSETCLIPRGN Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_OFFSETCLIPRGN";
    }

    else if(rec.RecordFunction == 0x0228){        // 2.3.3.6 META_FILLREGION Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_FILLREGION";
    }

    else if(rec.RecordFunction == 0x0231){        // 2.3.5.18 META_SETMAPPERFLAGS Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETMAPPERFLAGS";
    }

    else if(rec.RecordFunction == 0x0234){        // 2.3.4.11 META_SELECTPALETTE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      fc.Skip(2);
      */
      return "META_SELECTPALETTE";
    }

    else if(rec.RecordFunction == 0x0324){        // 2.3.3.15 META_POLYGON Record
      // variable length record
      return "META_POLYGON";
    }

    else if(rec.RecordFunction == 0x0325){        // 2.3.3.14 META_POLYLINE Record
      // variable length record
      return "META_POLYLINE";
    }

    else if(rec.RecordFunction == 0x020A){        // 2.3.5.27 META_SETTEXTJUSTIFICATION Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETTEXTJUSTIFICATION";
    }

    else if(rec.RecordFunction == 0x020B){        // 2.3.5.31 META_SETWINDOWORG Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETWINDOWORG";
    }

    else if(rec.RecordFunction == 0x020C){        // 2.3.5.30 META_SETWINDOWEXT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETWINDOWEXT";
    }

    else if(rec.RecordFunction == 0x020D){        // 2.3.5.29 META_SETVIEWPORTORG Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETVIEWPORTORG";
    }

    else if(rec.RecordFunction == 0x020E){        // 2.3.5.28 META_SETVIEWPORTEXT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_SETVIEWPORTEXT";
    }

    else if(rec.RecordFunction == 0x020F){        // 2.3.5.7 META_OFFSETWINDOWORG Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 10;
      rec.DataSkipped = true;
      fc.Skip(4);
      */
      return "META_OFFSETWINDOWORG";
    }

    else if(rec.RecordFunction == 0x0410){        // 2.3.5.13 META_SCALEWINDOWEXT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */return "META_SCALEWINDOWEXT";
    }

    else if(rec.RecordFunction == 0x0412){        // 2.3.5.12 META_SCALEVIEWPORTEXT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_SCALEVIEWPORTEXT";
    }

    else if(rec.RecordFunction == 0x0415){        // 2.3.5.2 META_EXCLUDECLIPRECT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_EXCLUDECLIPRECT";
    }

    else if(rec.RecordFunction == 0x0416){        // 2.3.5.3 META_INTERSECTCLIPRECT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_INTERSECTCLIPRECT";
    }

    else if(rec.RecordFunction == 0x0418){        // 2.3.3.3 META_ELLIPSE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_ELLIPSE";
    }

    else if(rec.RecordFunction == 0x0419){        // 2.3.3.7 META_FLOODFILL Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_FLOODFILL";
    }

    else if(rec.RecordFunction == 0x0429){        // 2.3.3.8 META_FRAMEREGION Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_FRAMEREGION";
    }

    else if(rec.RecordFunction == 0x0436){        // 2.3.5.1 META_ANIMATEPALETTE Record
      // variable length record
      return "META_ANIMATEPALETTE";
    }

    else if(rec.RecordFunction == 0x0521){        // 2.3.3.20  META_TEXTOUT
      long stringLength = fc.ReadBinaryInt(2,0);
      long pos = fc.GetPos();

      // read in the value, and then force the
      // cursor to the next position, in case
      // there were any null bytes that the
      // string couldn't read.
      String val;
      fc.ReadString(val, stringLength);

      if( (rec.RecordSize*2) != (stringLength + 12) ){
        // it's possible that the stringLength
        // is one short, in which case that
        // missing byte should be a null-terminator
        if(fc.ReadBinaryInt(1) == 0x00)
          stringLength += 1;
      }
      fc.Seek(pos + stringLength);

      //long yStart =
      fc.ReadBinaryInt(2,0);
      //long xStart =
      fc.ReadBinaryInt(2,0);
      rec.DataSkipped = true;
      rec.ShouldBeSize = stringLength + 12;
      return "META_TEXTOUT";
    }

    else if(rec.RecordFunction == 0x0538){        // 2.3.3.16 META_POLYPOLYGON Record
      // variable length record
      return "META_POLYPOLYGON";
    }

    else if(rec.RecordFunction == 0x0548){        // 2.3.3.4 META_EXTFLOODFILL Record
      rec.ShouldBeSize = 16;
      rec.DataSkipped = true;

      long mode = fc.ReadBinaryInt(2, 0);
      if(!IsAFloodFill_Enumeration(mode)){
        WriteDebug("Record data (" + mode +
            ") not in FloodFill Enumeration list");
        rec.IsValid = false;
      }
      fc.Skip(8);
      return "META_EXTFLOODFILL";
    }

    else if(rec.RecordFunction == 0x041B){        // 2.3.3.17 META_RECTANGLE Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_RECTANGLE";
    }

    else if(rec.RecordFunction == 0x041F){        // 2.3.3.19 META_SETPIXEL Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_SETPIXEL";
    }

    else if(rec.RecordFunction == 0x061C){        // 2.3.3.18 META_ROUNDRECT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 18;
      rec.DataSkipped = true;
      fc.Skip(12);
      */
      return "META_ROUNDRECT";
    }

    else if(rec.RecordFunction == 0x061D){        // 2.3.3.12 META_PATBLT Record
      rec.ShouldBeSize = 18;
      rec.DataSkipped = true;
      long rasterOperation = fc.ReadBinaryInt(4,0);
      if(!IsATernaryRasterOperation(rasterOperation)){
        WriteDebug("Record data (" + rasterOperation +
            ") not in Ternary Raster Operation list");
        rec.IsValid = false;
      }
      fc.Skip(8);
      return "META_PATBLT";
    }

    else if(rec.RecordFunction == 0x001E){        // 2.3.5.11 META_SAVEDC Record
      // - no data at all in this record
      rec.ShouldBeSize = 6;
      return "META_SAVEDC";
    }

    else if(rec.RecordFunction == 0x081A){        // 2.3.3.13 META_PIE RECORD
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 22;
      rec.DataSkipped = true;
      fc.Skip(16);
      */
      return "META_PIE";
    }

    else if(rec.RecordFunction == 0x0B23){        // 2.3.1.5 META_STRETCHBLT
      // complex record.  Not going to explore just yet
      return "META_STRETCHBLT";
    }

    else if(rec.RecordFunction == 0x0626){        // 2.3.6.1 META_ESCAPE Record
      // this is a variable length field,
      // but we can validate some aspects of it
      long escapeFunction = fc.ReadBinaryInt(2, 0);
      if(!IsAMetafileEscapes_Enumeration(escapeFunction)){
        WriteDebug("Record data (" + escapeFunction + ") not in MetafileEscapes_Enumeration list");
        rec.IsValid = false;
      }

      long byteCount = fc.ReadBinaryInt(2,0);
      fc.Skip(byteCount);
      rec.DataSkipped = true;

      return "META_ESCAPE";
    }

// START
    else if(rec.RecordFunction == 0x012A)
      return "META_INVERTREGION";
    else if(rec.RecordFunction == 0x012B)
      return "META_PAINTREGION";
    else if(rec.RecordFunction == 0x012C)
      return "META_SELECTCLIPREGION";
//END

    else if(rec.RecordFunction == 0x012D){        // 2.3.4.10 META_SELECTOBJECT
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      fc.Skip(2);
      */
      return "META_SELECTOBJECT";
    }

    else if(rec.RecordFunction == 0x012E){        // 2.3.5.24 META_SETTEXTALIGN Record
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      long val = fc.ReadBinaryInt(2, 0);
      if(!IsATextAlignmentMode_Enumeration(val)){
        WriteDebug("Record data (" + val + ") not in TextAlignmentMode Enumeration list");
        rec.IsValid = false;
      }

      return "META_SETTEXTALIGN";
    }

//START
    else if(rec.RecordFunction == 0x0817)
      return "META_ARC";
    else if(rec.RecordFunction == 0x0830)
      return "META_CHORD";
    else if(rec.RecordFunction == 0x0922)
      return "META_BITBLT";
    else if(rec.RecordFunction == 0x0A32)
      return "META_EXTTEXTOUT";
    else if(rec.RecordFunction == 0x0D33)
      return "META_SETDIBTODEV";
    else if(rec.RecordFunction == 0x0940)
      return "META_DIBBITDLT";
//END

    else if(rec.RecordFunction == 0x0B41){        // 2.3.1.3 META_DIBSTRETCHBLT Record
      // - goofy equation to figure out if
      //   this is an embedded picture
      if(rec.RecordSize == ((rec.RecordFunction >> 8) + 3))
        rec.IsLikelyAPicture = false;
      else
        rec.IsLikelyAPicture = true;
      return "META_DIBSTRETCHBLT";
    }

// START
    else if(rec.RecordFunction == 0x0F43)
      return "META_STRETCHDIB";
//END

    else if(rec.RecordFunction == 0x01F0){        // 2.3.4.7 META_DELETEOBJECT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 8;
      rec.DataSkipped = true;
      fc.Skip(2)      ;
      */
      return "META_DELETEOBJECT";
    }

// START
    else if(rec.RecordFunction == 0x00F7)
      return "META_CREATEPALETTE";
    else if(rec.RecordFunction == 0x01F9)
      return "META_CREATEPATTERNBRUSH";
//END

    else if(rec.RecordFunction == 0x02FA){        // 2.3.4.5 META_CREATEPENINDIRECT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 16;
      rec.DataSkipped = true;
      fc.Skip(10);
      */
      return "META_CREATEPENINDIRECT";
    }

    else if(rec.RecordFunction == 0x02FB){        // 2.3.4.2 META_CREATEFONTINDIRECT Record
      // variable length record
      return "META_CREATEFONTINDIRECT";
    }

    else if(rec.RecordFunction == 0x02FC){        // 2.3.4.1 META_CREATEBRUSHINDIRECT Record
      // Evidence indicates that 8 isn't always right
      /*
      rec.ShouldBeSize = 14;
      rec.DataSkipped = true;
      fc.Skip(8);
      */
      return "META_CREATEBRUSHINDIRECT";
    }

// START
    else if(rec.RecordFunction == 0x06FF)
      return "META_CREATEREGION";
//END

    return "Unknown Type (" + rec.RecordFunction + ")";
  }


  // ====================================================================================
  WMF_Record ReadNextRecord(FileClass fc){
    long pos = fc.GetPos();
    WMF_Record rec(_observer, fc);

    // Determine what kind of Record this is
    rec.RecordType = getRecordType(rec, fc);
    WriteDebug("Pos " + pos + ": " + rec.RecordType + ": " + (rec.RecordSize *2) + " bytes");

    // Apply some generic record validation
    if(rec.RecordFunction <= 0x0FFF){

      // Ensure the reported record size is within the available data limit
      long checkPos = fc.GetPos();
      if(!rec.DataSkipped) checkPos += ((rec.RecordSize*2)-6);

      if(checkPos <= fc.GetSize()){
        if(rec.RecordSize > 0){
          // Evaluate the record's size versus the size it should be
          if(rec.ShouldBeSize >= 0){
            if(rec.ShouldBeSize == (rec.RecordSize*2)){
              // Do nothing!  All is good
            }
            else {
              rec.IsValid = false;
              WriteDebug("RecordSize (" + (rec.RecordSize * 2) + ") <> Record Type listed size (" + rec.ShouldBeSize + ")");
            }
          }
        }
        else {
          rec.IsValid = false;
          WriteDebug("Record Size is zero, which is impossible.");
        }
      }
      else {
        rec.IsValid = false;
        WriteDebug("Record Size would extend beyond the available data.");
      }
    }
    else {
      rec.IsValid = false;
      WriteDebug("Invalid RecordFunction value (" + rec.RecordFunction + ")  Data will be ignored.");
    }

    // Some record types will have already moved through the data, but not all.
    if(rec.IsValid){
      if(!rec.DataSkipped){
        long skipOver = (rec.RecordSize * 2) - 6;
        if(skipOver >= 0){
          fc.Skip(skipOver);
        }
        else{
          rec.IsValid = false;
          WriteDebug("Invalid data size: " + skipOver);
        }
      }
    }

    return rec;
  }
}
